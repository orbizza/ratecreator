datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL_ONLINE")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x","debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-3.0.x", "linux-arm64-openssl-1.0.x"]
}


model Category {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  slug              String            @unique
  shortDescription  String?
  longDescription   String?
  keywords          String[]
  parentId          String?           @db.ObjectId
  parent            Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories     Category[]        @relation("CategoryHierarchy")
  accounts          CategoryMapping[] @relation("CategoryToCategoryMapping")
  popular           Boolean           @default(false)
  depth             Int               @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?

  @@index([name])
  @@index([parentId])
  @@index([shortDescription])
  @@index([longDescription])
  @@index([keywords])
  @@index([popular])
}

model Account {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  platform             Platform
  accountId            String
  handle               String?
  name                 String?
  name_en              String?
  followerCount        Int?
  imageUrl             String?
  bannerUrl            String?
  country              String?
  description          String?
  description_en       String?
  keywords             String?
  keywords_en          String?
  categories           CategoryMapping[] @relation("AccountToCategoryMapping")
  ytData               Json?
  redditData           Json?
  xData                Json?
  tiktokData           Json?
  twitchData           Json?
  instagramData        Json?
  isSeeded             Boolean           @default(false)
  isSuspended          Boolean           @default(false)
  ranking              Json?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  language_code        String?
  lang_confidence_score Float?
  rating               Float?
  reviewCount          Int?
  isSubCategoryFailed  Boolean?          @default(false)
  lastIndexedAt        DateTime?
  isDeleted            Boolean?          @default(false)
  isCategoryFailed     Boolean?          @default(false)
  isTranslationFailed  Boolean?          @default(false)
  videoFetch           Boolean?          

  reviews              Review[]
  subscriptions        Subscription[]
  videos              YouTubeVideo[]

  @@unique([platform, accountId])
  @@index([platform])
  @@index([accountId])
  @@index([handle])
  @@index([name])
  @@index([name_en])
  @@index([country])
  @@index([followerCount])
  @@index([description])
  @@index([keywords])
  @@index([description_en])
  @@index([keywords_en])
  @@index([isSuspended])
  @@index([language_code])
  @@index([reviewCount])
  @@index([rating])
  @@index([isSubCategoryFailed])
  @@index([lastIndexedAt])
  @@index([isDeleted])
  @@index([isCategoryFailed])
  @@index([isTranslationFailed])
  @@index([isSeeded])
  @@index([videoFetch])
  @@index([bannerUrl])
}

model CategoryMapping {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  accountId  String   @db.ObjectId
  categoryId String   @db.ObjectId
  account    Account  @relation("AccountToCategoryMapping", fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category   Category @relation("CategoryToCategoryMapping", fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([accountId, categoryId])
  @@index([accountId])
  @@index([categoryId])
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  clerkId        String         @unique
  email          String         @unique
  firstName      String?        @default("")
  lastName       String?        @default("")
  username       String?        @default("")
  isDeleted      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  webhookPayload Json?
  role           UserRole[]     @default([USER])

  reviews        Review[]
  comments       Comment[]
  votes          Vote[]
  commentVotes   CommentVote[]
  subscriptions  Subscription[]

  @@index([firstName])
  @@index([lastName])
  @@index([username])
  @@index([isDeleted])
  @@index([role])
}

model Subscription {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  account    Account  @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  accountId  String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@unique([userId, accountId])
  @@index([userId])
  @@index([accountId])
}

model Review {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  stars              Int
  content            Json?
  contentUrl         String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  author             User                 @relation(fields: [authorId], references: [id])
  authorId           String               @db.ObjectId
  account            Account              @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  accountId          String               @db.ObjectId
  platform           Platform
  comments           Comment[]
  votes              Vote[]
  verificationStatus VerificationStatus   @default(IN_PROGRESS)
  isEdited           Boolean              @default(false)
  editHistory        Json?                // Store edit history
  status             ReviewStatus         @default(PUBLISHED)
  reportCount        Int                  @default(0)
  lastActivityAt     DateTime             @default(now())  // For sorting/trending
  viewCount          Int                  @default(0)
  isDeleted          Boolean              @default(false)

  @@index([authorId])
  @@index([accountId])
  @@index([authorId, accountId])
  @@index([status])
  @@index([lastActivityAt])
  @@index([reportCount])
  @@index([viewCount])
  @@index([platform])
  @@index([title])
  @@index([stars])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([isEdited])
  @@index([verificationStatus])
  @@index([isDeleted])
}

model Comment {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  content            Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  author             User                 @relation(fields: [authorId], references: [id])
  authorId           String               @db.ObjectId
  review             Review               @relation(fields: [reviewId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviewId           String               @db.ObjectId
  replyToId          String?              @db.ObjectId
  replyTo            Comment?             @relation("CommentReplies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies            Comment[]            @relation("CommentReplies")
  votes              CommentVote[]
  verificationStatus VerificationStatus   @default(IN_PROGRESS)
  isEdited           Boolean              @default(false)
  editHistory        Json?                // Store edit history
  status             CommentStatus        @default(PUBLISHED)
  reportCount        Int                  @default(0)
  isDeleted          Boolean              @default(false)

  @@index([authorId])
  @@index([reviewId])
  @@index([replyToId])
  @@index([status])
  @@index([reportCount])
  @@index([isDeleted])
  @@index([verificationStatus])
  @@index([isEdited])

}

model Vote {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @db.ObjectId
  review   Review   @relation(fields: [reviewId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviewId String   @db.ObjectId
  type     VoteType

  @@unique([userId, reviewId])
  @@index([userId])
  @@index([reviewId])
}

model CommentVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  commentId String   @db.ObjectId
  type      VoteType

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model YouTubeVideo {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId              String   // YouTube video ID
  account              Account  @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  accountId            String   @db.ObjectId
  title                String
  description          String?
  channelId            String?
  channelTitle         String?
  playlistId           String?
  position             Int?
  privacyStatus        String?
  thumbnails           Json?    // Store all thumbnail variations
  viewCount            Int      @default(0)
  likeCount            Int      @default(0)
  duration             String?  // Video duration in ISO 8601 format
  publishedAt          DateTime
  videoPublishedAt     DateTime?
  lastFetchedAt        DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  isDeleted            Boolean  @default(false)

  @@unique([accountId, videoId])
  @@index([accountId])
  @@index([videoId])
  @@index([publishedAt])
  @@index([videoPublishedAt])
  @@index([viewCount])
  @@index([likeCount])
  @@index([channelId])
  @@index([isDeleted])
  @@index([lastFetchedAt])
}



// -----------------------
// Enums
// -----------------------

enum Platform {
  YOUTUBE
  TWITTER
  INSTAGRAM
  REDDIT
  TIKTOK
  TWITCH
}

enum UserRole {
  USER
  ADMIN
  CREATOR
  BRAND
}

enum VoteType {
  UP
  DOWN
}

// New enum for LLM verification statuses.
enum VerificationStatus {
  VERIFIED
  NOT_VERIFIED
  FLAGGED
  SPAM
  BOT
  IN_PROGRESS
}

enum ReviewStatus {
  DRAFT
  PUBLISHED
  PENDING
  HIDDEN
  DELETED
  FLAGGED
}

enum CommentStatus {
  PUBLISHED
  HIDDEN
  DELETED
  PENDING
  FLAGGED
}
